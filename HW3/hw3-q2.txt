pragma solidity >= 0.4.0<0.9.0;

contract mytoken{
    
    
    address public minter;
    mapping(address => uint256) public balances;
    mapping (address => mapping (address => uint256)) private allowed;
    event sent(address from,address to,uint amount);
    constructor(){
        minter=msg.sender;
    }
    function mint(address receiver,uint amount)public{
        require(msg.sender == minter);
        balances[receiver] += amount;
    }
    //msg.sender must be minter and transfer amount to receiver balance
    error insuficiantbalance(uint requested ,uint available);

    function send(address receiver,uint amount) public{
        if(amount>balances[msg.sender])
        revert insuficiantbalance({
            requested : amount,
            available : balances[msg.sender]
        });
        balances[msg.sender] -= amount;
        balances[receiver] += amount;
        emit sent(msg.sender,receiver,amount);
    }

    function transfer(address to, uint256 value) public returns (bool) {
    require(value <= balances[msg.sender]);
    require(to != address(0));

    balances[msg.sender] -= (value);
    balances[to] += (value);
    return true;
     }
     //Transfer token for a specified address
    function increaseAllowance(address spender,uint256 addedValue) public returns (bool){
    require(spender != address(0));
    allowed[msg.sender][spender]  += (addedValue);
    return true;
    }
    //Increase the amount of tokens that an owner allowed to a spender
    function decreaseAllowance(address spender,uint256 subtractedValue)public returns (bool){
    require(spender != address(0));
    allowed[msg.sender][spender] = (subtractedValue);
    return true;
    }
    //Decrease the amount of tokens that an owner allowed to a spender
}
